---
import { getCollection } from "astro:content";
import Teaser from "./Teaser.astro";

interface Props {
    showAllInitially: boolean;
}

const { showAllInitially } = Astro.props;

const allDependencies = await getCollection("dependencies");
---

<section class="">
    <input
        type="text"
        class="search border-2 w-full px-2 py-4 rounded border-indigo-500 text-indigo-500 focus:outline-none focus:border-indigo-700"
        placeholder="Search"
    />
    <p class="my-2 text-sm italic">Searching {allDependencies.length} entries</p>
    <div class="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-4 gap-4 mt-8 search-results">
        {
            allDependencies.map(dependency => (
                <Teaser name={dependency.data.name} hidden={!showAllInitially} />
            ))
        }
    </div>
    <div class="no-results italic hidden">No results</div>
    <slot />
</section>

<script>
    const packages = document.querySelectorAll<HTMLAnchorElement>(".search-results [data-name]");
    const noResults = document.querySelector<HTMLDivElement>(".no-results");

    document.querySelector<HTMLInputElement>(".search")!.addEventListener("keyup", event => {
        const query = (event.target as HTMLInputElement).value.toLowerCase();
        let foundResults = false;

        if (query.trim().length === 0) {
            packages.forEach(pkg => pkg.classList.add("hidden"));
            noResults!.classList.add("hidden");
            return;
        }

        packages.forEach(pkg => {
            if (pkg.dataset?.name?.toLowerCase().includes(query)) {
                pkg.classList.remove("hidden");
                foundResults = true;
            } else {
                pkg.classList.add("hidden");
            }
        });

        if (foundResults) {
            noResults!.classList.add("hidden");
        } else {
            noResults!.classList.remove("hidden");
        }
    });
</script>
