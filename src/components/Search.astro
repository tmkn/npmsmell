---
import { getCollection } from "astro:content";

import { Search as SearchWidget, type FrontmatterData } from "../components/Search.tsx";
import { getMockTeaserData, getTeaserData } from "../npm";
import type { TeaserProps } from "./Teaser.tsx";

interface Props {
    showAllOnEmpty: boolean;
    pathPrefix: string;
}

const { showAllOnEmpty, pathPrefix } = Astro.props;

const allDependencies = await getCollection("dependencies");
const searchTiles: FrontmatterData[] = allDependencies.map(dependency => ({
    name: dependency.data.name,
    description: dependency.data.description,
    type: dependency.data.type
}));

const tiles: TeaserProps[] = [];

for (const tile of searchTiles) {
    const data = await (import.meta.env.DEV
        ? getMockTeaserData(tile.name)
        : getTeaserData(tile.name));

    tiles.push({
        ...tile,
        downloads: data.downloads,
        dependencies: data.dependencies[0],
        distinctDependencies: data.dependencies[1],
        pathPrefix
    });
}
---

<SearchWidget
    client:load
    tiles={tiles}
    showAllOnEmpty={showAllOnEmpty}
/>
